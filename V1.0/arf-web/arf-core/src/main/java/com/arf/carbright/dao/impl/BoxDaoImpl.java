package com.arf.carbright.dao.impl;import java.util.Date;import java.util.HashMap;import java.util.List;import javax.persistence.Query;import javax.persistence.TypedQuery;import org.hibernate.SQLQuery;import org.hibernate.transform.Transformers;import org.springframework.stereotype.Repository;import org.springframework.util.Assert;import org.springframework.util.CollectionUtils;import com.arf.carbright.dao.BoxDao;import com.arf.carbright.entity.Box;import com.arf.core.dao.impl.BaseDaoImpl;@Repository("boxDao")public class BoxDaoImpl extends BaseDaoImpl<Box, Long> implements BoxDao {		@Override	public List<Box> findByUseStatus(String communityNumber,Box.UseStatus useStatus,String cabinetNum) {				String jpql = "select box from Box box where box.useStatus = :useStatus and box.parkingId = :communityNumber and box.status = :status";		if(cabinetNum!=null){			jpql=jpql.concat(" and box.cabinetNum=:cabinetNum");		}		TypedQuery<Box> query=entityManager.createQuery(jpql, Box.class);		query.setParameter("useStatus", useStatus.ordinal()).setParameter("communityNumber", communityNumber).setParameter("status", Box.Status.Normal.ordinal());		if(cabinetNum!=null){			query.setParameter("cabinetNum", cabinetNum);		}		return query.getResultList();		 	}	@Override	public Box findByNumber(String communityNumber,String cabinetNum,String boxNum) {		String jpql = "select box from Box box where box.parkingId=:communityNumber and box.cabinetNum=:cabinetNum and box.boxNum = :boxNum order by box.id desc";		return entityManager.createQuery(jpql, Box.class)				.setParameter("communityNumber", communityNumber)				.setParameter("cabinetNum", cabinetNum)				.setParameter("boxNum", boxNum)				.getSingleResult();	}	@Override	public List<Box> findByCabinetNumber(String cabinetNumber) {		String jpql = "select box from Box box where box.cabinetNum = :cabinetNum";		return entityManager.createQuery(jpql, Box.class)				.setParameter("cabinetNum",cabinetNumber)				.getResultList();	}	@Override	public List<HashMap<String, Object>> cabinetBoxUsedCount(String communityNumber, String cabinetNum) {		StringBuffer bufferhql =new StringBuffer("SELECT COUNT(1) as boxRemainingCount,e.cabinet_num as cabinetNum FROM e_box AS e WHERE e.parking_id=:communityNumber AND e.use_status=:useStatus AND e.status=:status");		if(cabinetNum!=null){			bufferhql.append(" AND e.cabinet_num=:cabinetNum");		}else{			bufferhql.append(" GROUP BY e.cabinet_num");		}		Query query=entityManager.createNativeQuery(bufferhql.toString());				query.setParameter("communityNumber", communityNumber);		query.setParameter("useStatus", Box.UseStatus.Not_Used.ordinal());		query.setParameter("status", Box.Status.Normal.ordinal());		if(cabinetNum!=null){			query.setParameter("cabinetNum",cabinetNum);		}		query.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);		@SuppressWarnings("unchecked")		List<HashMap<String,Object>> objList =query.getResultList();		if(!CollectionUtils.isEmpty(objList)){						return objList;		}				return null;	}	@Override	public List<Box> findByCabinetBox(String communityNumber, String cabinetNum, String boxNum) {		String jpql = "select box from Box box where box.parkingId = :communityNumber and box.cabinetNum = :cabinetNum";		if(boxNum!=null){			jpql=jpql.concat(" and box.boxNum=:boxNum");		}		TypedQuery<Box> query=entityManager.createQuery(jpql, Box.class);		query.setParameter("communityNumber", communityNumber).setParameter("cabinetNum", cabinetNum);		if(boxNum!=null){			query.setParameter("boxNum", boxNum);		}		return query.getResultList();	}	@Override	public List<Box> findByUseStatus(Box.UseStatus status){		String jpql = "select box from Box box where box.useStatus = :useStatus";		TypedQuery<Box> query=entityManager.createQuery(jpql, Box.class);		return query.setParameter("useStatus", status.ordinal()).getResultList();	}	@Override	public void releaseUsedBoxes(Date before) {		Assert.notNull(before, "释放时间节点before参数不能为空");		String sql = "update e_box set use_status=" + Box.UseStatus.Not_Used.ordinal() + ",locked_date=null " + 					" where 1=1 " + 					" and use_status = " + Box.UseStatus.Locked.ordinal() + " " + 					" and locked_date <= :before ";		entityManager.createNativeQuery(sql).setParameter("before", before).executeUpdate();	}}